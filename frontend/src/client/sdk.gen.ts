// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { GoogleGoogleLoginData, GoogleGoogleLoginResponses, GoogleGoogleCallbackData, GoogleGoogleCallbackResponses, LoginLoginAccessTokenData, LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, LoginTestTokenData, LoginTestTokenResponses, UsersReadUsersData, UsersReadUsersResponses, UsersReadUsersErrors, UsersCreateUserData, UsersCreateUserResponses, UsersCreateUserErrors, UsersDeleteUserMeData, UsersDeleteUserMeResponses, UsersReadUserMeData, UsersReadUserMeResponses, UsersUpdateUserMeData, UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, UsersRegisterUserData, UsersRegisterUserResponses, UsersRegisterUserErrors, UsersDeleteUserData, UsersDeleteUserResponses, UsersDeleteUserErrors, UsersReadUserByIdData, UsersReadUserByIdResponses, UsersReadUserByIdErrors, UsersUpdateUserData, UsersUpdateUserResponses, UsersUpdateUserErrors, UtilsTestEmailData, UtilsTestEmailResponses, UtilsTestEmailErrors, UtilsHealthCheckData, UtilsHealthCheckResponses, PrivateCreateUserData, PrivateCreateUserResponses, PrivateCreateUserErrors, ProjectsGetOwnProjectsData, ProjectsGetOwnProjectsResponses, ProjectsCreateProjectData, ProjectsCreateProjectResponses, ProjectsCreateProjectErrors, ProjectsDeleteProjectData, ProjectsDeleteProjectResponses, ProjectsDeleteProjectErrors, ProjectsGetDashboardData, ProjectsGetDashboardResponses, ProjectsGetDashboardUserData, ProjectsGetDashboardUserResponses, ProjectsDownloadProjectData, ProjectsDownloadProjectResponses, ProjectsDownloadProjectErrors, ProjectsGetProjectStatusData, ProjectsGetProjectStatusResponses, ProjectsGetProjectStatusErrors, ProjectsGetLineItemsData, ProjectsGetLineItemsResponses, ProjectsGetLineItemsErrors, ProjectsGetSampleByIndexData, ProjectsGetSampleByIndexResponses, ProjectsGetSampleByIndexErrors, ProjectsAssignTaskData, ProjectsAssignTaskResponses, ProjectsAssignTaskErrors, ProjectsConfirmLineItemData, ProjectsConfirmLineItemResponses, ProjectsConfirmLineItemErrors, ProjectsUpdateLineItemMessageData, ProjectsUpdateLineItemMessageResponses, ProjectsUpdateLineItemMessageErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { loginTestTokenResponseTransformer, usersReadUsersResponseTransformer, usersCreateUserResponseTransformer, usersReadUserMeResponseTransformer, usersUpdateUserMeResponseTransformer, usersRegisterUserResponseTransformer, usersReadUserByIdResponseTransformer, usersUpdateUserResponseTransformer, privateCreateUserResponseTransformer, projectsGetLineItemsResponseTransformer, projectsGetSampleByIndexResponseTransformer, projectsUpdateLineItemMessageResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Google Login
 * Initiate Google OAuth login flow with CSRF protection
 */
export const googleGoogleLogin = <ThrowOnError extends boolean = false>(options?: Options<GoogleGoogleLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleGoogleLoginResponses, unknown, ThrowOnError>({
        url: '/api/v1/google/login',
        ...options
    });
};

/**
 * Google Callback
 * Handle Google OAuth callback with enhanced security validation
 */
export const googleGoogleCallback = <ThrowOnError extends boolean = false>(options?: Options<GoogleGoogleCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleGoogleCallbackResponses, unknown, ThrowOnError>({
        url: '/api/v1/google/callback',
        ...options
    });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginLoginAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginLoginAccessTokenResponses, LoginLoginAccessTokenErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(options?: Options<LoginTestTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginTestTokenResponses, unknown, ThrowOnError>({
        responseTransformer: loginTestTokenResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/login/test-token',
        ...options
    });
};

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUsersResponses, UsersReadUsersErrors, ThrowOnError>({
        responseTransformer: usersReadUsersResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateUserResponses, UsersCreateUserErrors, ThrowOnError>({
        responseTransformer: usersCreateUserResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersDeleteUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<UsersDeleteUserMeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(options?: Options<UsersReadUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersReadUserMeResponses, unknown, ThrowOnError>({
        responseTransformer: usersReadUserMeResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdateUserMeResponses, UsersUpdateUserMeErrors, ThrowOnError>({
        responseTransformer: usersUpdateUserMeResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(options: Options<UsersUpdatePasswordMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdatePasswordMeResponses, UsersUpdatePasswordMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(options: Options<UsersRegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRegisterUserResponses, UsersRegisterUserErrors, ThrowOnError>({
        responseTransformer: usersRegisterUserResponseTransformer,
        url: '/api/v1/users/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponses, UsersDeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(options: Options<UsersReadUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersReadUserByIdResponses, UsersReadUserByIdErrors, ThrowOnError>({
        responseTransformer: usersReadUserByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdateUserResponses, UsersUpdateUserErrors, ThrowOnError>({
        responseTransformer: usersUpdateUserResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(options: Options<UtilsTestEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UtilsTestEmailResponses, UtilsTestEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/utils/utils/test-email/',
        ...options
    });
};

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponses, unknown, ThrowOnError>({
        url: '/api/v1/utils/utils/health-check/',
        ...options
    });
};

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(options: Options<PrivateCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PrivateCreateUserResponses, PrivateCreateUserErrors, ThrowOnError>({
        responseTransformer: privateCreateUserResponseTransformer,
        url: '/api/v1/private/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Own Projects
 * Get projects owned by the current user.
 */
export const projectsGetOwnProjects = <ThrowOnError extends boolean = false>(options?: Options<ProjectsGetOwnProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsGetOwnProjectsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/',
        ...options
    });
};

/**
 * Create Project
 * Create a new project.
 */
export const projectsCreateProject = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsCreateProjectResponses, ProjectsCreateProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Project
 * Delete a project by ID.
 */
export const projectsDeleteProject = <ThrowOnError extends boolean = false>(options: Options<ProjectsDeleteProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectsDeleteProjectResponses, ProjectsDeleteProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Get Dashboard Data
 * Get dashboard statistics for all projects.
 */
export const projectsGetDashboard = <ThrowOnError extends boolean = false>(options?: Options<ProjectsGetDashboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsGetDashboardResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/dashboard',
        ...options
    });
};

/**
 * Get User Dashboard Data
 * Get dashboard statistics for current user projects.
 */
export const projectsGetDashboardUser = <ThrowOnError extends boolean = false>(options?: Options<ProjectsGetDashboardUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsGetDashboardUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/dashboard_user',
        ...options
    });
};

/**
 * Download Project
 * Download project data as JSONL file.
 */
export const projectsDownloadProject = <ThrowOnError extends boolean = false>(options: Options<ProjectsDownloadProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsDownloadProjectResponses, ProjectsDownloadProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/projects/{project_id}/download',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Project Status
 * Get the status of a specific project.
 */
export const projectsGetProjectStatus = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetProjectStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsGetProjectStatusResponses, ProjectsGetProjectStatusErrors, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/status',
        ...options
    });
};

/**
 * Get Line Items
 * Get line items from a project with pagination and filtering.
 */
export const projectsGetLineItems = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetLineItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsGetLineItemsResponses, ProjectsGetLineItemsErrors, ThrowOnError>({
        responseTransformer: projectsGetLineItemsResponseTransformer,
        url: '/api/v1/projects/{project_id}/samples',
        ...options
    });
};

/**
 * Get Sample by Index
 * Get a specific sample by index from a project.
 */
export const projectsGetSampleByIndex = <ThrowOnError extends boolean = false>(options: Options<ProjectsGetSampleByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsGetSampleByIndexResponses, ProjectsGetSampleByIndexErrors, ThrowOnError>({
        responseTransformer: projectsGetSampleByIndexResponseTransformer,
        url: '/api/v1/projects/{project_id}/samples/{sample_idx}',
        ...options
    });
};

/**
 * Assign Task
 * Assign task to a user for a project.
 */
export const projectsAssignTask = <ThrowOnError extends boolean = false>(options: Options<ProjectsAssignTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsAssignTaskResponses, ProjectsAssignTaskErrors, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Confirm Line Item
 * Confirm a line item with user feedback.
 */
export const projectsConfirmLineItem = <ThrowOnError extends boolean = false>(options: Options<ProjectsConfirmLineItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsConfirmLineItemResponses, ProjectsConfirmLineItemErrors, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/confirm/{line_item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Line Item Message
 * Update a line item message with new content and role.
 */
export const projectsUpdateLineItemMessage = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateLineItemMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsUpdateLineItemMessageResponses, ProjectsUpdateLineItemMessageErrors, ThrowOnError>({
        responseTransformer: projectsUpdateLineItemMessageResponseTransformer,
        url: '/api/v1/projects/{project_id}/update/{line_item_message_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};