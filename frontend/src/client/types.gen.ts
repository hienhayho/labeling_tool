// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_login-login_access_token
 */
export type BodyLoginLoginAccessToken = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * PrivateUserCreate
 */
export type PrivateUserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Is Verified
     */
    is_verified?: boolean;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token?: string | null;
    /**
     * Token Type
     */
    token_type?: string;
    /**
     * Is First Login
     */
    is_first_login?: boolean;
    /**
     * Expires In
     */
    expires_in?: number;
};

/**
 * UpdatePassword
 */
export type UpdatePassword = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
    /**
     * Last Login Time
     */
    last_login_time?: Date | null;
    /**
     * Password
     */
    password: string;
};

/**
 * UserConversation
 */
export type UserConversation = {
    /**
     * Id
     */
    id: string;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Topic
     */
    topic: string;
    /**
     * Title
     */
    title: string;
};

/**
 * UserPublic
 */
export type UserPublic = {
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
    /**
     * Last Login Time
     */
    last_login_time?: Date | null;
    /**
     * Id
     */
    id: number;
    /**
     * Conversations
     */
    conversations?: Array<UserConversation>;
};

/**
 * UserRegister
 */
export type UserRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Full Name
     */
    full_name?: string | null;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
    /**
     * Last Login Time
     */
    last_login_time?: Date | null;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * UserUpdateMe
 */
export type UserUpdateMe = {
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UsersPublic
 */
export type UsersPublic = {
    /**
     * Data
     */
    data: Array<UserPublic>;
    /**
     * Count
     */
    count: number;
};

/**
 * ProjectPublic
 */
export type ProjectPublic = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     */
    url: string;
    /**
     * Owner Id
     */
    owner_id: number;
};

/**
 * ProjectCreate
 */
export type ProjectCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Url
     */
    url: string;
};

/**
 * ProjectStatus
 */
export type ProjectStatus = {
    /**
     * State
     */
    state: string;
    /**
     * Info
     */
    info?: {
        [key: string]: unknown;
    } | null;
    /**
     * Name
     */
    name?: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Num Samples
     */
    num_samples?: number | null;
    /**
     * Num Task Assigned
     */
    num_task_assigned?: number | null;
    /**
     * Num Task Not Assigned
     */
    num_task_not_assigned?: number | null;
    /**
     * User Task Summary
     */
    user_task_summary?: Array<UserTaskSummary>;
};

/**
 * AssignTaskRequest
 */
export type AssignTaskRequest = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Num Samples
     */
    num_samples: number;
};

/**
 * LineItemMessageConfirmRequest
 */
export type LineItemMessageConfirmRequest = {
    /**
     * Id
     */
    id: number;
    /**
     * Role
     */
    role: string;
    /**
     * Content
     */
    content: string;
};

/**
 * LineItemConfirmRequest
 */
export type LineItemConfirmRequest = {
    /**
     * Line Messages
     */
    line_messages: Array<LineItemMessageConfirmRequest>;
    /**
     * Tools
     */
    tools?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Feedback
     */
    feedback?: string | null;
    /**
     * Status
     */
    status: 'UNLABELED' | 'CONFIRMED' | 'APPROVED' | 'REJECTED';
};

/**
 * LineItemMessageUpdateRequest
 */
export type LineItemMessageUpdateRequest = {
    /**
     * Role
     */
    role?: string | null;
    /**
     * Content
     */
    content?: string | null;
};

/**
 * LineItemMessageRead
 */
export type LineItemMessageRead = {
    /**
     * Line Message Index
     */
    line_message_index: number;
    /**
     * Role
     */
    role: string;
    /**
     * Content
     */
    content: string;
    /**
     * Id
     */
    id: number;
    /**
     * Feedback
     */
    feedback?: string | null;
    /**
     * Created At
     */
    created_at?: Date;
    /**
     * Updated At
     */
    updated_at?: Date;
};

/**
 * LineItemRead
 */
export type LineItemRead = {
    /**
     * Tools
     */
    tools: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Id
     */
    id: number;
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Line Index
     */
    line_index: number;
    /**
     * Feedback
     */
    feedback?: string | null;
    /**
     * Line Messages
     */
    line_messages?: Array<LineItemMessageRead>;
    /**
     * Created At
     */
    created_at?: Date;
    /**
     * Updated At
     */
    updated_at?: Date;
    /**
     * Status
     */
    status?: ('UNLABELED' | 'CONFIRMED' | 'APPROVED' | 'REJECTED') | null;
};

/**
 * LineItemsPublic
 */
export type LineItemsPublic = {
    /**
     * Data
     */
    data: Array<LineItemRead>;
    /**
     * Total Count
     */
    total_count: number;
    /**
     * Num Pages
     */
    num_pages: number;
    /**
     * Status Counts
     */
    status_counts?: {
        /**
         * Unlabeled Count
         */
        UNLABELED?: number;
        /**
         * Confirmed Count
         */
        CONFIRMED?: number;
        /**
         * Approved Count
         */
        APPROVED?: number;
        /**
         * Rejected Count
         */
        REJECTED?: number;
    };
};

/**
 * UserTaskSummary
 */
export type UserTaskSummary = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Task Count
     */
    task_count: number;
    /**
     * Confirmed
     */
    confirmed: number;
    /**
     * Unlabeled
     */
    unlabeled: number;
    /**
     * Approved
     */
    approved: number;
    /**
     * Rejected
     */
    rejected: number;
};

/**
 * ProjectDashboard
 */
export type ProjectDashboard = {
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Project Name
     */
    project_name: string;
    /**
     * Project Description
     */
    project_description: string;
    /**
     * Num Samples
     */
    num_samples: number;
    /**
     * User Task Summary
     */
    user_task_summary: Array<UserTaskSummary>;
};

/**
 * ProjectUserDashboard
 */
export type ProjectUserDashboard = {
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Project Name
     */
    project_name: string;
    /**
     * Project Description
     */
    project_description: string;
    /**
     * Task Count
     */
    task_count: number;
    /**
     * Status Counts
     */
    status_counts: {
        /**
         * Unlabeled Count
         */
        UNLABELED?: number;
        /**
         * Confirmed Count
         */
        CONFIRMED?: number;
        /**
         * Approved Count
         */
        APPROVED?: number;
        /**
         * Rejected Count
         */
        REJECTED?: number;
    };
};

/**
 * ProjectDownloadRequest
 */
export type ProjectDownloadRequest = {
    /**
     * Limit
     */
    limit?: number | null;
    /**
     * Include Statuses
     */
    include_statuses?: Array<'UNLABELED' | 'CONFIRMED' | 'APPROVED' | 'REJECTED'>;
    /**
     * File Name
     */
    file_name: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GoogleGoogleLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/google/login';
};

export type GoogleGoogleLoginResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GoogleGoogleCallbackData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/google/callback';
};

export type GoogleGoogleCallbackResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type GoogleGoogleCallbackResponse = GoogleGoogleCallbackResponses[keyof GoogleGoogleCallbackResponses];

export type LoginLoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenError = LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors];

export type LoginLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenResponse = LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses];

export type LoginTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/login/test-token';
};

export type LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/users/';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type UsersCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors];

export type UsersCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersRegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup';
};

export type UsersRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersRegisterUserError = UsersRegisterUserErrors[keyof UsersRegisterUserErrors];

export type UsersRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersRegisterUserResponse = UsersRegisterUserResponses[keyof UsersRegisterUserResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type UtilsTestEmailData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email To
         */
        email_to: string;
    };
    url: '/api/v1/utils/utils/test-email/';
};

export type UtilsTestEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UtilsTestEmailError = UtilsTestEmailErrors[keyof UtilsTestEmailErrors];

export type UtilsTestEmailResponses = {
    /**
     * Successful Response
     */
    201: Message;
};

export type UtilsTestEmailResponse = UtilsTestEmailResponses[keyof UtilsTestEmailResponses];

export type UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/utils/health-check/';
};

export type UtilsHealthCheckResponses = {
    /**
     * Response Utils-Health Check
     * Successful Response
     */
    200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type PrivateCreateUserData = {
    body: PrivateUserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/private/users/';
};

export type PrivateCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PrivateCreateUserError = PrivateCreateUserErrors[keyof PrivateCreateUserErrors];

export type PrivateCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PrivateCreateUserResponse = PrivateCreateUserResponses[keyof PrivateCreateUserResponses];

export type ProjectsGetOwnProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/projects/';
};

export type ProjectsGetOwnProjectsResponses = {
    /**
     * Successful Response
     */
    200: Array<ProjectPublic>;
};

export type ProjectsGetOwnProjectsResponse = ProjectsGetOwnProjectsResponses[keyof ProjectsGetOwnProjectsResponses];

export type ProjectsCreateProjectData = {
    body: ProjectCreate;
    path?: never;
    query?: never;
    url: '/api/v1/projects/';
};

export type ProjectsCreateProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsCreateProjectError = ProjectsCreateProjectErrors[keyof ProjectsCreateProjectErrors];

export type ProjectsCreateProjectResponses = {
    /**
     * Successful Response
     */
    200: ProjectPublic;
};

export type ProjectsCreateProjectResponse = ProjectsCreateProjectResponses[keyof ProjectsCreateProjectResponses];

export type ProjectsDeleteProjectData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}';
};

export type ProjectsDeleteProjectErrors = {
    /**
     * Project not found
     */
    404: Message;
};

export type ProjectsDeleteProjectError = ProjectsDeleteProjectErrors[keyof ProjectsDeleteProjectErrors];

export type ProjectsDeleteProjectResponses = {
    /**
     * Project deleted successfully
     */
    200: Message;
};

export type ProjectsDeleteProjectResponse = ProjectsDeleteProjectResponses[keyof ProjectsDeleteProjectResponses];

export type ProjectsGetDashboardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/projects/dashboard';
};

export type ProjectsGetDashboardResponses = {
    /**
     * Successful Response
     */
    200: Array<ProjectDashboard>;
};

export type ProjectsGetDashboardResponse = ProjectsGetDashboardResponses[keyof ProjectsGetDashboardResponses];

export type ProjectsGetDashboardUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/projects/dashboard_user';
};

export type ProjectsGetDashboardUserResponses = {
    /**
     * Successful Response
     */
    200: Array<ProjectUserDashboard>;
};

export type ProjectsGetDashboardUserResponse = ProjectsGetDashboardUserResponses[keyof ProjectsGetDashboardUserResponses];

export type ProjectsDownloadProjectData = {
    body: ProjectDownloadRequest;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/download';
};

export type ProjectsDownloadProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsDownloadProjectError = ProjectsDownloadProjectErrors[keyof ProjectsDownloadProjectErrors];

export type ProjectsDownloadProjectResponses = {
    /**
     * Successful Response
     */
    200: Blob | File;
};

export type ProjectsDownloadProjectResponse = ProjectsDownloadProjectResponses[keyof ProjectsDownloadProjectResponses];

export type ProjectsGetProjectStatusData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/status';
};

export type ProjectsGetProjectStatusErrors = {
    /**
     * Project not found
     */
    404: Message;
};

export type ProjectsGetProjectStatusError = ProjectsGetProjectStatusErrors[keyof ProjectsGetProjectStatusErrors];

export type ProjectsGetProjectStatusResponses = {
    /**
     * Successful Response
     */
    200: ProjectStatus;
};

export type ProjectsGetProjectStatusResponse = ProjectsGetProjectStatusResponses[keyof ProjectsGetProjectStatusResponses];

export type ProjectsGetLineItemsData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Status
         */
        status?: 'UNLABELED' | 'CONFIRMED' | 'APPROVED' | 'REJECTED';
    };
    url: '/api/v1/projects/{project_id}/samples';
};

export type ProjectsGetLineItemsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsGetLineItemsError = ProjectsGetLineItemsErrors[keyof ProjectsGetLineItemsErrors];

export type ProjectsGetLineItemsResponses = {
    /**
     * Successful Response
     */
    200: LineItemsPublic;
};

export type ProjectsGetLineItemsResponse = ProjectsGetLineItemsResponses[keyof ProjectsGetLineItemsResponses];

export type ProjectsGetSampleByIndexData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
        /**
         * Sample Index
         */
        sample_idx: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/samples/{sample_idx}';
};

export type ProjectsGetSampleByIndexErrors = {
    /**
     * Sample not found
     */
    404: Message;
};

export type ProjectsGetSampleByIndexError = ProjectsGetSampleByIndexErrors[keyof ProjectsGetSampleByIndexErrors];

export type ProjectsGetSampleByIndexResponses = {
    /**
     * Successful Response
     */
    200: LineItemRead;
};

export type ProjectsGetSampleByIndexResponse = ProjectsGetSampleByIndexResponses[keyof ProjectsGetSampleByIndexResponses];

export type ProjectsAssignTaskData = {
    body: AssignTaskRequest;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/assign';
};

export type ProjectsAssignTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsAssignTaskError = ProjectsAssignTaskErrors[keyof ProjectsAssignTaskErrors];

export type ProjectsAssignTaskResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ProjectsAssignTaskResponse = ProjectsAssignTaskResponses[keyof ProjectsAssignTaskResponses];

export type ProjectsConfirmLineItemData = {
    body: LineItemConfirmRequest;
    path: {
        /**
         * Project Id
         */
        project_id: number;
        /**
         * Line Item Id
         */
        line_item_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/confirm/{line_item_id}';
};

export type ProjectsConfirmLineItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsConfirmLineItemError = ProjectsConfirmLineItemErrors[keyof ProjectsConfirmLineItemErrors];

export type ProjectsConfirmLineItemResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ProjectsConfirmLineItemResponse = ProjectsConfirmLineItemResponses[keyof ProjectsConfirmLineItemResponses];

export type ProjectsUpdateLineItemMessageData = {
    body: LineItemMessageUpdateRequest;
    path: {
        /**
         * Project Id
         */
        project_id: number;
        /**
         * Line Item Message Id
         */
        line_item_message_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/update/{line_item_message_id}';
};

export type ProjectsUpdateLineItemMessageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectsUpdateLineItemMessageError = ProjectsUpdateLineItemMessageErrors[keyof ProjectsUpdateLineItemMessageErrors];

export type ProjectsUpdateLineItemMessageResponses = {
    /**
     * Successful Response
     */
    200: LineItemMessageRead;
};

export type ProjectsUpdateLineItemMessageResponse = ProjectsUpdateLineItemMessageResponses[keyof ProjectsUpdateLineItemMessageResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};