// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            format: 'password',
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        refresh_token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refresh Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        },
        is_first_login: {
            type: 'boolean',
            title: 'Is First Login',
            default: false
        },
        expires_in: {
            type: 'integer',
            title: 'Expires In',
            default: 3600
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        avatar_url: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Url'
        },
        last_login_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Login Time'
        },
        password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserConversationSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        topic: {
            type: 'string',
            title: 'Topic'
        },
        title: {
            type: 'string',
            title: 'Title'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'topic', 'title'],
    title: 'UserConversation'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        avatar_url: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Url'
        },
        last_login_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Login Time'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        conversations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserConversation'
            },
            title: 'Conversations'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        avatar_url: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Url'
        },
        last_login_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Login Time'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 128,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ProjectPublicSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        url: {
            type: 'string',
            maxLength: 255,
            title: 'Url'
        },
        owner_id: {
            type: 'integer',
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['id', 'name', 'url', 'owner_id'],
    title: 'ProjectPublic'
} as const;

export const ProjectCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        url: {
            type: 'string',
            maxLength: 255,
            title: 'Url'
        }
    },
    type: 'object',
    required: ['name', 'url'],
    title: 'ProjectCreate'
} as const;

export const ProjectStatusSchema = {
    properties: {
        state: {
            type: 'string',
            title: 'State'
        },
        info: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Info'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        num_samples: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Num Samples'
        },
        num_task_assigned: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Num Task Assigned'
        },
        num_task_not_assigned: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Num Task Not Assigned'
        },
        user_task_summary: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserTaskSummary'
            },
            title: 'User Task Summary'
        }
    },
    type: 'object',
    required: ['state'],
    title: 'ProjectStatus'
} as const;

export const AssignTaskRequestSchema = {
    properties: {
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        num_samples: {
            type: 'integer',
            minimum: 1,
            title: 'Num Samples'
        }
    },
    type: 'object',
    required: ['user_id', 'num_samples'],
    title: 'AssignTaskRequest'
} as const;

export const ModifyTaskAssignmentRequestSchema = {
    properties: {
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        new_num_samples: {
            type: 'integer',
            title: 'New Num Samples'
        }
    },
    type: 'object',
    required: ['user_id', 'new_num_samples'],
    title: 'ModifyTaskAssignmentRequest'
} as const;

export const DeleteUserTasksRequestSchema = {
    properties: {
        user_id: {
            type: 'integer',
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'DeleteUserTasksRequest'
} as const;

export const LineItemMessageConfirmRequestSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        role: {
            type: 'string',
            title: 'Role'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['id', 'role', 'content'],
    title: 'LineItemMessageConfirmRequest'
} as const;

export const LineItemConfirmRequestSchema = {
    properties: {
        line_messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LineItemMessageConfirmRequest'
            },
            title: 'Line Messages'
        },
        tools: {
            anyOf: [
                {
                    type: 'array',
                    items: {
                        type: 'object'
                    }
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tools'
        },
        feedback: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedback'
        },
        status: {
            type: 'string',
            enum: ['UNLABELED', 'CONFIRMED', 'APPROVED', 'REJECTED'],
            title: 'Status'
        }
    },
    type: 'object',
    required: ['line_messages', 'status'],
    title: 'LineItemConfirmRequest'
} as const;

export const LineItemMessageUpdateRequestSchema = {
    properties: {
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role'
        },
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        }
    },
    type: 'object',
    title: 'LineItemMessageUpdateRequest'
} as const;

export const LineItemMessageReadSchema = {
    properties: {
        line_message_index: {
            type: 'integer',
            title: 'Line Message Index'
        },
        role: {
            type: 'string',
            title: 'Role'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        feedback: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedback'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['line_message_index', 'role', 'content', 'id'],
    title: 'LineItemMessageRead'
} as const;

export const LineItemReadSchema = {
    properties: {
        tools: {
            type: 'array',
            items: {
                type: 'object'
            },
            title: 'Tools'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        project_id: {
            type: 'integer',
            title: 'Project Id'
        },
        line_index: {
            type: 'integer',
            title: 'Line Index'
        },
        feedback: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedback'
        },
        line_messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LineItemMessageRead'
            },
            title: 'Line Messages'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        status: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['UNLABELED', 'CONFIRMED', 'APPROVED', 'REJECTED']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        }
    },
    type: 'object',
    required: ['tools', 'id', 'project_id', 'line_index'],
    title: 'LineItemRead'
} as const;

export const LineItemsPublicSchema = {
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LineItemRead'
            },
            title: 'Data'
        },
        total_count: {
            type: 'integer',
            title: 'Total Count'
        },
        num_pages: {
            type: 'integer',
            title: 'Num Pages'
        },
        status_counts: {
            type: 'object',
            properties: {
                UNLABELED: {
                    type: 'integer',
                    title: 'Unlabeled Count'
                },
                CONFIRMED: {
                    type: 'integer',
                    title: 'Confirmed Count'
                },
                APPROVED: {
                    type: 'integer',
                    title: 'Approved Count'
                },
                REJECTED: {
                    type: 'integer',
                    title: 'Rejected Count'
                }
            },
            title: 'Status Counts'
        }
    },
    type: 'object',
    required: ['data', 'total_count', 'num_pages'],
    title: 'LineItemsPublic'
} as const;

export const UserTaskSummarySchema = {
    properties: {
        user_id: {
            type: 'integer',
            title: 'User Id'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        task_count: {
            type: 'integer',
            title: 'Task Count'
        },
        confirmed: {
            type: 'integer',
            title: 'Confirmed'
        },
        unlabeled: {
            type: 'integer',
            title: 'Unlabeled'
        },
        approved: {
            type: 'integer',
            title: 'Approved'
        },
        rejected: {
            type: 'integer',
            title: 'Rejected'
        }
    },
    type: 'object',
    required: ['user_id', 'full_name', 'email', 'task_count', 'confirmed', 'unlabeled', 'approved', 'rejected'],
    title: 'UserTaskSummary'
} as const;

export const ProjectDashboardSchema = {
    properties: {
        project_id: {
            type: 'integer',
            title: 'Project Id'
        },
        project_name: {
            type: 'string',
            title: 'Project Name'
        },
        project_description: {
            type: 'string',
            title: 'Project Description'
        },
        num_samples: {
            type: 'integer',
            title: 'Num Samples'
        },
        user_task_summary: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserTaskSummary'
            },
            title: 'User Task Summary'
        }
    },
    type: 'object',
    required: ['project_id', 'project_name', 'project_description', 'num_samples', 'user_task_summary'],
    title: 'ProjectDashboard'
} as const;

export const ProjectUserDashboardSchema = {
    properties: {
        project_id: {
            type: 'integer',
            title: 'Project Id'
        },
        project_name: {
            type: 'string',
            title: 'Project Name'
        },
        project_description: {
            type: 'string',
            title: 'Project Description'
        },
        task_count: {
            type: 'integer',
            title: 'Task Count'
        },
        status_counts: {
            type: 'object',
            properties: {
                UNLABELED: {
                    type: 'integer',
                    title: 'Unlabeled Count'
                },
                CONFIRMED: {
                    type: 'integer',
                    title: 'Confirmed Count'
                },
                APPROVED: {
                    type: 'integer',
                    title: 'Approved Count'
                },
                REJECTED: {
                    type: 'integer',
                    title: 'Rejected Count'
                }
            },
            title: 'Status Counts'
        }
    },
    type: 'object',
    required: ['project_id', 'project_name', 'project_description', 'task_count', 'status_counts'],
    title: 'ProjectUserDashboard'
} as const;

export const ProjectDownloadRequestSchema = {
    properties: {
        limit: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Limit'
        },
        include_statuses: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['UNLABELED', 'CONFIRMED', 'APPROVED', 'REJECTED']
            },
            title: 'Include Statuses'
        },
        file_name: {
            type: 'string',
            title: 'File Name'
        }
    },
    type: 'object',
    required: ['file_name'],
    title: 'ProjectDownloadRequest'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;